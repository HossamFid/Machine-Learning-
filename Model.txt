Linear regression 

from sklearn.linear_model import linear regression 

Create a linear regression object?
lm = LinearRegression()
---------
----------
Train the model using 'engine-size' as the independent variable and 'price' as the dependent variable?
X = df['highway-mpg']
Y = df['price']

lm.fit(X,Y)

lm1.fit(df[['engine-size']], df[['price']])
--------
--------

Find the slope and intercept of the model?

Yhat = lm.predict(X)
Yhat 


lm.intercept_   # y intercept 
lm.coef_        # slope 


-------------------------
---------------------------
------------------------------
Model Evaluation using Visualization

import seaborn as sns
%matplotlib inline 

Regression Plot :

width = 6
height = 6
plt.figure(figsize=(width, height))
sns.regplot(x="highway-mpg", y="price", data=df)
plt.ylim(0,)



-------
--------
What is the equation of the predicted line. You can use x and yhat or 'engine-size' or 'price'?

𝑌ℎ𝑎𝑡=𝑎+𝑏𝑋
 
Plugging in the actual values we get:

price = 38423.31 - 821.73 x highway-mpg
---------------------------
-------------------------------
------------------------------------------



Model Evaluation using Visualization

Regression Plot

width = 6
height = 6
plt.figure(figsize=(width, height))
sns.regplot(x="highway-mpg", y="price", data=df)
plt.ylim(0,)


-----------
-----------
Residual Plot

width = 12
height = 10
plt.figure(figsize=(width, height))
sns.residplot(df['highway-mpg'], df['price'])
plt.show()

-----------
-----------
Multiple Linear Regression (distribution plot)

Y_hat = lm.predict(Z)
plt.figure(figsize=(width, height))


ax1 = sns.distplot(df['price'], hist=False, color="r", label="Actual Value")
sns.distplot(Y_hat, hist=False, color="b", label="Fitted Values" , ax=ax1)


plt.title('Actual vs Fitted Values for Price')
plt.xlabel('Price (in dollars)')
plt.ylabel('Proportion of Cars')

plt.show()
plt.close()